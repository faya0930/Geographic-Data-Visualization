# -*- coding: utf-8 -*-
"""地理資料視覺化.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14OcTL9cOr7LcH__qaUIx4vlbFmoMfzuC
"""
import pandas as pd
import folium
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

df_zhongxing = pd.read_csv('/Zhongxing.csv')
df_minhe = pd.read_csv('/Minhe.csv')
df_hongren = pd.read_csv('/Hongren.csv')
df_jiji = pd.read_csv('/Jiji.csv')
df_mingtan = pd.read_csv('/Mingtan.csv')
df_shuangwen = pd.read_csv('/Shuangwen.csv')
df_yingbei = pd.read_csv('/Yingbei.csv')

df_yingbei.head()

def avg_login(login, students):
    avg_login = round((login / students), 2) if students != 0 else 0  # 使用 round() 保留小數點後兩位
    return avg_login

def avg_tests(tests, students):
    avg_tests = round((tests / students), 2) if students != 0 else 0  # 使用 round() 保留小數點後兩位
    return avg_tests

def valid_login(login, tests):
    valid_login = round((tests / login), 2) if login != 0 else 0  # 使用 round() 保留小數點後兩位
    return valid_login

#民和國中
minhe_students = df_minhe.shape[0]
minhe_login = df_minhe['登入次數'].sum()
minhe_tests = df_minhe['完成老師指派測驗卷數'].sum() + df_minhe['自我測驗卷數'].sum()
minhe_avg_login = avg_login(minhe_login,minhe_students)
minhe_avg_tests = avg_tests(minhe_tests,minhe_students)
minhe_valid_login = valid_login(minhe_login,minhe_tests)

#中興國中
zhongxing_students = df_zhongxing.shape[0]
zhongxing_login = df_zhongxing['登入次數'].sum()
zhongxing_tests = df_zhongxing['完成老師指派測驗卷數'].sum() + df_zhongxing['自我測驗卷數'].sum()
zhongxing_avg_login = avg_login(zhongxing_login,zhongxing_students)
zhongxing_avg_tests = avg_tests(zhongxing_tests,zhongxing_students)
zhongxing_valid_login = valid_login(zhongxing_login,zhongxing_tests)

#宏仁國中
hongren_students = df_hongren.shape[0]
hongren_login = df_hongren['登入次數'].sum()
hongren_tests = df_hongren['完成老師指派測驗卷數'].sum() + df_hongren['自我測驗卷數'].sum()
hongren_avg_login = avg_login(hongren_login,hongren_students)
hongren_avg_tests = avg_tests(hongren_tests,hongren_students)
hongren_valid_login = valid_login(hongren_login,hongren_tests)

#明潭國中
mingtan_students = df_mingtan.shape[0]
mingtan_login = df_mingtan['登入次數'].sum()
mingtan_tests = df_mingtan['完成老師指派測驗卷數'].sum() + df_hongren['自我測驗卷數'].sum()
mingtan_avg_login = avg_login(mingtan_login,mingtan_students)
mingtan_avg_tests = avg_tests(mingtan_tests,mingtan_students)
mingtan_valid_login = valid_login(mingtan_login,mingtan_tests)

#爽文國中
shuangwen_students = df_shuangwen.shape[0]
shuangwen_login = df_shuangwen['登入次數'].sum()
shuangwen_tests = df_shuangwen['完成老師指派測驗卷數'].sum() + df_hongren['自我測驗卷數'].sum()
shuangwen_avg_login = avg_login(shuangwen_login,shuangwen_students)
shuangwen_avg_tests = avg_tests(shuangwen_tests,shuangwen_students)
shuangwen_valid_login = valid_login(shuangwen_login,shuangwen_tests)

#集集國中
jiji_students = df_jiji.shape[0]
jiji_login = df_jiji['登入次數'].sum()
jiji_tests = df_jiji['完成老師指派測驗卷數'].sum() + df_hongren['自我測驗卷數'].sum()
jiji_avg_login = avg_login(jiji_login,jiji_students)
jiji_avg_tests = avg_tests(jiji_tests,jiji_students)
jiji_valid_login = valid_login(jiji_login,jiji_tests)

#營北國中
yingbei_students = df_yingbei.shape[0]
yingbei_login = df_yingbei['登入次數'].sum()
yingbei_tests = df_yingbei['完成老師指派測驗卷數'].sum() + df_hongren['自我測驗卷數'].sum()
yingbei_avg_login = avg_login(yingbei_login,yingbei_students)
yingbei_avg_tests = avg_tests(yingbei_tests,yingbei_students)
yingbei_valid_login = valid_login(yingbei_login,yingbei_tests)

# 平均使用程度計算
result_internal = pd.DataFrame({
    '學校名稱': ['民和國中', '中興國中', '宏仁國中', '明潭國中', '爽文國中', '集集國中', '營北國中'],
    '學生總數': [minhe_students, zhongxing_students, hongren_students, mingtan_students, shuangwen_students, jiji_students, yingbei_students],
    '登入次數總和': [minhe_login, zhongxing_login, hongren_login, mingtan_login, shuangwen_login, jiji_login, yingbei_login],
    '完成測驗卷數總和': [minhe_tests, zhongxing_tests, hongren_tests, mingtan_tests, shuangwen_tests, jiji_tests, yingbei_tests],
    '平均登入次數': [minhe_avg_login, zhongxing_avg_login, hongren_avg_login, mingtan_avg_login, shuangwen_avg_login, jiji_avg_login, yingbei_avg_login],
    '平均完成測驗卷數': [minhe_avg_tests, zhongxing_avg_tests, hongren_avg_tests, mingtan_avg_tests, shuangwen_avg_tests, jiji_avg_tests, yingbei_avg_tests],
    '經': ['23.79912', '23.93150', '23.96152', '23.86779', '23.93422', '23.83206', '23.95243'],
    '緯': ['120.91784', '120.6914943', '120.97386', '120.91158', '120.76358', '120.78580', '120.68799'],
    '有效登入比率': [minhe_valid_login, zhongxing_valid_login, hongren_valid_login, mingtan_valid_login, shuangwen_valid_login, jiji_valid_login, yingbei_valid_login]
})

# 使用 pandas 的 qcut 平均劃分為三等份
result_internal['級距'] = pd.qcut(result_internal['有效登入比率'], 3, labels=['低', '中', '高'])

# 回傳結果預覽
df = result_internal
df.head(7)

import folium

# 建立地圖（中心點設在南投縣）
map_center = [23.90235, 120.6909167]
m = folium.Map(location=map_center, zoom_start=9)

# 顏色對應字典
color_map = {
    '低': 'red',
    '中': 'orange',
    '高': 'green'
}

# 畫出每一筆學校資料
for _, row in df.iterrows():
    level = row['級距']
    color = color_map.get(level, 'blue')  # 預設為藍色

    # 自訂 Popup 寬度
    popup_html = (
        f"<b>{row['學校名稱']}</b><br>"
        f"學生總數: {row['學生總數']}<br>"
        f"總登入次數: {row['登入次數總和']}<br>"
        f"完成測驗卷總數: {row['完成測驗卷數總和']}<br>"
        f"平均登入次數: {row['平均登入次數']}<br>"
        f"平均完成測驗卷數: {row['平均完成測驗卷數']}<br>"
        f"有效登入比率: {row['有效登入比率']}"
    )
    popup = folium.Popup(popup_html, max_width=300, min_width=200)

    folium.CircleMarker(
        location=[row['經'], row['緯']],
        radius=7,
        popup=popup,
        color=color,
        fill=True,
        fill_opacity=0.8
    ).add_to(m)

# 顯示地圖
m